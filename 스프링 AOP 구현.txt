@Aspect 를 사용하려면 @EnableAspectJAutoProxy 를 스프링 설정에 추가해야 하지만,
스프링 부트를 사용하면 자동으로 추가된다.

** 참고
- 스프링 AOP는 AspectJ의 문법을 차용하고, 프록시 방식의 AOP를 제공한다. AspectJ를 직접 사용하는 것이아니다.
- 스프링 AOP를 사용할 때는 @Aspect 애노테이션을 주로 사용하는데, 이 애노테이션도 AspectJ가 제공하는 애노테이션이다.

** 참고
@Aspect 를 포함한 org.aspectj 패키지 관련 기능은 aspectjweaver.jar 라이브러리가 제공하는 기능이다.
앞서 build.gradle 에 spring-boot-starter-aop 를 포함했는데,
이렇게 하면 스프링의 AOP 관련 기능과 함께 aspectjweaver.jar 도 함께 사용할 수 있게 의존 관계에 포함된다.
그런데 스프링에서는 AspectJ가 제공하는 "애노테이션"이나 "관련 인터페이스만 사용"하는 것이고, 실제 AspectJ
가 제공하는 컴파일, 로드타임 위버 등을 사용하는 것은 아니다.
 ***스프링은 지금까지 학습한 것 처럼 프록시방식의 AOP를 사용한다

** @Aspect 는 애스펙트라는 표식이지 컴포넌트 스캔이 되는 것은 아니다.
   따라서 AspectV1 를 AOP로 사용하려면 스프링 빈으로 등록해야 한다.
- 스프링 빈으로 등록하는 방법은 다음과 같다.
   1.@Bean 을 사용해서 직접 등록
   2.@Component 컴포넌트 스캔을 사용해서 자동 등록
   3.@Import 주로 설정 파일을 추가할 때 사용( @Configuration )
        - @Import 는 주로 설정 파일을 추가할 때 사용하지만,
          이 기능으로 스프링 빈도 등록할 수 있다.
          테스트에서는 버전을 올려가면서 변경할 예정이어서 간단하게 @Import 기능을 사용.

** @Pointcut
- @Pointcut 에 포인트컷 표현식을 사용한다.
- 메서드 이름과 파라미터를 합쳐서 포인트컷 시그니처(signature)라 한다.
- 메서드의 반환 타입은 void 여야 한다.
- 코드 내용은 비워둔다.
- 여기서 포인트컷 시그니처는 allOrder() 이다. 이름 그대로 주문과 관련된 모든 기능을 대상으로 하는 포인트컷이다.
- @Around 어드바이스에서는 포인트컷을 직접 지정해도 되지만, 포인트컷 시그니처를 사용해도 된다.
  여기서는@Around("allOrder()") 를 사용한다.
- private, public 같은 접근 제어자는 내부에서만 사용하면 private 을 사용해도 되지만,
  다른 애스팩트에서 참고하려면 public 을 사용해야 한다.
=>결과적으로 AspectV1 과 같은 기능을 수행한다.
이렇게 분리하면 하나의 포인트컷 표현식을 여러 어드바이스에서 함께 사용할 수 있다.
그리고 뒤에 설명하겠지만 다른 클래스에 있는 외부 어드바이스에서도 포인트컷을 함께 사용할 수 있다.