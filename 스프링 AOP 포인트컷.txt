** 포인트컷 지시자
- 포인트 컷 표현식을 포함한 포인컷에 대해서 알아보낟.
애스팩트J는 포인트컷을 편리하게 표현하기 위한 특별한 표현식을 제공한다.
    ex) @Pointcut("execution(* hello.aop.order..*(..))")
포인트컷 표현식은 AspectJ pointcut expression, 즉 애스팩트J가 제공하는 포인트컷 표현식을 줄여서 말하는 것이다.

** 포인트컷 지시자
포인트컷 표현식은 'execution' 같은 포인트컷 지시자(Pointcut Designator)로 시작한다. 줄여서 PCD라 한다.

** 포인트컷 지시자의 종류
execution: 메소드 실행 조인 포인트를 매칭한다. 스프링 AOP에서 가장 많이 사용하고, 기능도 복잡하다.
within: 특정 타입 내의 조인 포인트를 매칭한다.
args: 인자가 주어진 타입의 인스턴스인 조인 포인트
this: 스프링 빈 객체(스프링 AOP 프록시)를 대상으로 하는 조인 포인트
target: Target 객체(스프링 AOP 프록시가 가르키는 실체 대상)를 대상으로 하는 조인 포인트
@target: 실행 객체의 클래스에 주어진 타입의 애노테이션이 있는 조인포인트
@within: 주어진 애노테이션이 있는 타입 내 조인 포인트
@annotation: 메서드가 주어진 애노테이션을 가지고 있는 조인 포인트를 매칭
@args: 전달된 실제 인수의 런타임 타입이 주어진 타입의 애노테이션을 갖는 조인 포인트
bean: 스프링 전용 포인트컷 지시자, 빈의 이름으로 포인트컷을 지정한다.

- execution은 가장 많이 사용하고, 나머지는 자주 사용하지 않는다. 따라서 execution을 중점적으로 이해하자.

** execution 문법
   execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)
   execution(접근제어자?          반환타입           선언타입?                 메서드이름(파라미터)          예외?)
       - 메소드 실행 조인 포인트를 매칭한다.
       - ?는 생략할 수 있다.
       - * 같은 패턴을 지정할 수 있다.
       - 파라미터에서 .. 은 파라미터의 타입과 파라미터 수가 상관없다는 뜻
패키지에서 . 와 .. 의 차이를 이해해야한다.
    .: 정확하게 해당 위치의 패키지
    ..: 해당 위치의 패키지와 그 하위 패키지도 포함